


/*

records introduced in c# 9
 a record can be  record struct or  record class
 default record is record class

    public record Person(int ID, string Name);
    1) Below Autogenerated Properties with access specifiers created 
        public int ID { get; init; }
        public string Name { get; init; }
    2) They will be init access only, hence immutability by default 
    3) Record is a Reference type type  a = b both points to same location  
    4) Record automatical implementation for Equals(), == and !=,  automatic hascode computation, for its VALUE properties  ( which is struct features) 
 support inheritance from another record ( similar to class property)
 built in ToString() override 
*/



// case 1
public record   Circle1(int Radius, string[] Names);


// case 2

public record RecordNames(string Name1, string Name2);
public record Circle2(int Radius, RecordNames names);


// case 3: Bad record spoils the records immutability propty due to setter 
public record BadRecord
{
    public int Radius { get; set; }
}


// case 4 : Override the Autogenerated proterty and access specifier
public record Circle4(int Radius)
{
    private int Radius { get; init; }

    public int GetRadius() => Radius;
}

